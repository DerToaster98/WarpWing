plugins {
    id 'net.minecraftforge.gradle' version "${forgeGradleVersion}"
    id 'eclipse'
    id 'idea'
    id 'org.parchmentmc.librarian.forgegradle' version "${parchmentGradleVersion}"
}

version = "$mcVersion-$modVersion"
group = 'de.dertoaster.warpwing'
archivesBaseName = "$modName"

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 17 to end users, so your mod should target Java 17.

minecraft {
    mappings channel: "${mappingsChannel}", version: "${mappingsVersion}"
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
			taskName "runClient ${modName} ${mcVersion}"
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                warpwing {
                    source sourceSets.main
                }
            }
        }

        server {
			taskName "runServer ${modName} ${mcVersion}"
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                warpwing {
                    source sourceSets.main
                }
            }
        }

        data {
			taskName "runData ${modName} ${mcVersion}"
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'warpwing', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                warpwing {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft("net.minecraftforge:forge:${mcVersion}-${forgeVersion}")
}

jar.finalizedBy('reobfJar') 

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "$modName",
            "Specification-Vendor": "DerToaster",
            "Specification-Version": "$modVersion", // We are version 1 of ourselves
            "Implementation-Title": "$modName",
            "Implementation-Version": "$modVersion",
            "Implementation-Vendor" :"DerToaster",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar fil
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file:///${project.projectDir}/mcmodsrepo"
//        }
//    }
//}
